TODO
====

The follow is a list, more or less in the order I intend to do them of things
that need to be done.  I'm trying to be as granular as possible.


2)  Update all old references to ``settings.DATABASE_*`` to reference
    ``settings.DATABASES``.  This includes the following locations

    * internals/contributing -- still needs an update on TEST_*
    * ref/settings -- needs to be upddated for TEST_*
    * topics/testing -- needs update for the TEST_* settings, plus test refactor

    The remaining items will be fixed as the code for them enters the code base.

    Replace old instances of :setting:`DATABASE_` with a new tag or something.


3)  Update all management commands in the following way:

    * ``dumpdata``: By default dump the ``default`` database.  Later add a
      ``--database`` flag.

    flush, reset, and syncdb need to not prompt the user multiple times.

7)  Remove any references to the global ``django.db.connection`` object in the
    SQL creation process.  This includes(but is probably not limited to):

    * The way we create ``Query`` from ``BaseQuery`` is awkward and hacky.
    * ``django.db.models.fields.Field`` This uses it, as do it's subclasses.
    * ``django.db.models.fields.related`` It's used all over the place here,
      including opening a cursor and executing queries, so that's going to
      need to be totally refactored.  There's a ticket to at least move that
      raw SQL and execution to ``Query``/``QuerySet`` so hopefully that makes
      it in before I need to tackle this.


5)  Add the ``using`` Meta option.  Tests and docs(these are to be assumed at
    each stage from here on out).

8)  Implement some way to create a new ``Query`` for a different backend when
    we switch.  There are several checks against ``self.connection`` prior to
    SQL construction, so we either need to defer all these(which will be
    difficult, but probably not impossible), or have an alternate strategy,
    such as:

    * Remove all tests against ``Query.connection`` before the SQL generation
      phase.  This involves changing the following methods:

        * ``Query.add_aggregate``
        * ``DateQuery.add_date_select``
        * ``Field.get_db_prep_lookup``
        * ``DateField.get_db_prep_value``
        * ``DateTimeField.get_db_prep_value``
        * ``DecimalField.get_db_prep_save``
        * ``TimeField.get_db_prep_value``

10) Time permitting add support for a ``DatabaseManager``.
